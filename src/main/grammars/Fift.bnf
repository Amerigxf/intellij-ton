{
    parserClass="com.github.andreypfau.intellijton.fift.parser.FiftParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Fift"
    psiImplClassSuffix="Impl"
    psiPackage="com.github.andreypfau.intellijton.fift.psi"
    psiImplPackage="com.github.andreypfau.intellijton.fift.psi.impl"

    elementTypeHolderClass="com.github.andreypfau.intellijton.fift.psi.FiftTypes"
    elementTypeClass="com.github.andreypfau.intellijton.fift.psi.FiftElementType"
    tokenTypeClass="com.github.andreypfau.intellijton.fift.psi.FiftTokenType"
    
    tokens = [
        CHAR='regexp:(char \S)'
        ABORT='regexp:(abort"([^"\r\n\\]|\\.)*")'
        PRINT='regexp:(\."([^"\r\n\\]|\\.)*")'
        STRING_CONCAT='regexp:(\+"([^"\r\n\\]|\\.)*")'
        STRING_LITERAL='regexp:("([^"\r\n\\]|\\.)*")'
        NUMBER_DIGIT_LITERAL='regexp:(-?[0-9]+(/-?[0-9]+)?)'
        NUMBER_HEX_LITERAL='regexp:(0[xX][0-9a-fA-F]+)'
        NUMBER_BINARY_LITERAL='regexp:(0[bB][01]+)'
        SLICE_BINARY_LITERAL='regexp:(b\{[01]+})'
        SLICE_HEX_LITERAL='regexp:(x\{[0-9a-fA-F_]+})'
        BYTE_HEX_LITERAL='regexp:(B\{[0-9a-fA-F_]+})'
        LBRACKET='['
        RBRACKET=']'
        LBRACE='{'
        RBRACE='}'
        LPAREN='('
        RPAREN=')'
        UNDERSCORE_LPAREN='_('
        DUP='dup'
        DROP='drop'
        SWAP='swap'
        ROT='rot'
        REV_ROT='-rot'
        OVER='over'
        TUCK='tuck'
        NIP='nip'
        DUP_DUP='2dup'
        DROP_DROP='2drop'
        SWAP_SWAP='2swap'
        PICK='pick'
        ROLL='roll'
        REV_ROLL='-roll'
        EXCH='exch'
        EXCH2='exch2'
        COND_DUP='?dup'
        IF='if'
        IFNOT='ifnot'
        COND='cond'
        UNTIL='until'
        WHILE='while'
        TIMES='times'
        INCLUDE='include'
        TRUE='true'
        FALSE='false'
        COLON=':'
        DOUBLE_COLON='::'
        DOUBLE_COLON_UNDERSCORE='::_'

        COMMENT='regexp:(//.*)|(#.*)'
        WHITE_SPACE='regexp:\s+'
        IDENTIFIER='regexp:\S+'
    ]

    implements(".*") = "com.github.andreypfau.intellijton.fift.psi.FiftElement"
}

private root ::= statement*
private statement ::= (word_def | block | list | literal | word)
word ::= stack_word | loop_word | cond_word | INCLUDE | CHAR | ABORT | PRINT | STRING_CONCAT | ordinary_word
ordinary_word ::= IDENTIFIER {
    mixin = "com.github.andreypfau.intellijton.fift.psi.FiftOrdinaryWordMixin"
}
number_literal ::= NUMBER_DIGIT_LITERAL | NUMBER_HEX_LITERAL | NUMBER_BINARY_LITERAL
boolean_literal ::= TRUE | FALSE
block ::= '{' statement* '}'
list ::= ('(' | '_(') statement* ')'
literal ::= number_literal | boolean_literal | STRING_LITERAL | SLICE_BINARY_LITERAL | SLICE_HEX_LITERAL | BYTE_HEX_LITERAL
stack_word ::= DUP | DROP | SWAP | ROT | REV_ROT | OVER | TUCK | NIP | DUP_DUP | DROP_DROP | SWAP_SWAP | PICK | ROLL | REV_ROLL | EXCH | EXCH2 | COND_DUP
loop_word ::= UNTIL | WHILE | TIMES
cond_word ::= IF | IFNOT | COND
word_def ::= (block | ordinary_word) (':'|'::'|'::_') word_def_identifier {
    implements = "com.github.andreypfau.intellijton.fift.psi.FiftNamedElement"
    mixin = "com.github.andreypfau.intellijton.fift.psi.FiftWordDefMixin"
}
word_def_identifier ::= IDENTIFIER