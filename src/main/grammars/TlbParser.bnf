{
    parserClass="com.github.andreypfau.intellijton.tlb.parser.TlbParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Tlb"
    psiImplClassSuffix="Impl"
    psiPackage="com.github.andreypfau.intellijton.tlb.psi"
    psiImplPackage="com.github.andreypfau.intellijton.tlb.psi.impl"
    implements="com.github.andreypfau.intellijton.tlb.psi.TlbElement"

    elementTypeHolderClass="com.github.andreypfau.intellijton.tlb.psi.TlbTypes"
    elementTypeClass="com.github.andreypfau.intellijton.tlb.psi.TlbElementType"
    tokenTypeClass="com.github.andreypfau.intellijton.tlb.psi.TlbTokenType"

    tokens = [
        PLUS='+'
        MINUS='-'
        TIMES='*'
        COLUMN=':'
        SEMICOLUMN=';'
        LPAREN='('
        RPAREN=')'
        LBRACE='{'
        RBRACE='}'
        LBRACKET='['
        RBRACKET=']'
        EQUALS='='
        UNDERSCORE='_'
        QUESTION='?'
        DOT='.'
        TILDE='~'
        TAG='#'
        DOUBLE_TAG='##'
        CIRCUMFLEX='^'
        DOLLAR='$'
        EQ='=='
        LESS='<'
        GREATER='>'
        LEQ='<='
        GEQ='>='
        NEQ='!='
        TYPE='Type'
        EMPTY='EMPTY'
        ANY='Any'
        CELL='Cell'
        INT='int'
        UINT='uint'
        BITS='bits'
        NAT_LESS='#<'
        NAT_LEQ='#<='
        UINT1 = 'uint1'
        UINT2 = 'uint2'
        UINT4 = 'uint4'
        UINT8 = 'uint8'
        UINT16 = 'uint16'
        UINT32 = 'uint32'
        UINT64 = 'uint64'
        UINT128 = 'uint128'
        UINT1256 = 'uint256'
        UINT1257 = 'uint257'
        BITS1 = 'bits1'
        BITS2 = 'bits2'
        BITS4 = 'bits4'
        BITS8 = 'bits8'
        BITS16 = 'bits16'
        BITS32 = 'bits32'
        BITS64 = 'bits64'
        BITS128 = 'bits128'
        BITS256 = 'bits256'
        BITS512 = 'bits512'
        BITS1024 = 'bits1023'
        WHITE_SPACE='regexp:\s+'
        COMMENT='regexp:(//.*)'
        HEX_BITSTRING='regexp:#[0-9a-f]*_?'
        BINARY_BITSTRING='regexp:\$[01]*_?'
        INT_CONST='regexp[0-9]+'
        IDENTIFIER='regexp:[a-zA-Z_][0-9a-zA-Z0-9_]*'
        NUMBER='regexp:[0-9]+'
    ]
}

root ::= constructor_def*

constructor_def ::= ('_' | constructor_name) field_list '=' type_name type* ';' {pin=1}

constructor_name ::= IDENTIFIER constructor_tag?
constructor_tag ::= constructor_hex_tag | constructor_binary_tag
constructor_hex_tag ::= HEX_BITSTRING
constructor_binary_tag ::= BINARY_BITSTRING

private field_list_recovery ::= !('='|']')
field_list ::= (constraint | param)* {recoverWhile=field_list_recovery}
constraint ::= '{' (implicit_param | expression) '}' {pin=1}
param ::= named_param | unnamed_param
named_param ::= ('_' | IDENTIFIER) ':' expr95
unnamed_param ::= expr95
implicit_param ::= IDENTIFIER ':' ('#'|'Type')

type_name ::= IDENTIFIER

int_const ::= INT_CONST
cell_ref ::= '^' type {pin=1}

expression ::= expr10
private expr10 ::= expr20 '=' expr20 | expr20 '<=' expr20 | expr20 '<' expr20 | expr20 '>=' expr20 | expr20 '>' expr20 | expr20
private expr20 ::= expr30 ('+' expr30)*
private expr30 ::= expr90 ('*' expr90)*
private expr90 ::= expr95+
private expr95 ::= expr97 cond_type?
private cond_type ::= '?' type {pin=1}
private expr97 ::= type ('.' type)?

anonymous_constructor ::= '[' field_list ']' {pin=1}

type ::= '~'? (paren_expr | anonymous_constructor | int_const | cell_ref | builtin_type | NUMBER | IDENTIFIER)
paren_expr ::= "(" expression ')' {pin=1}
builtin_type ::= '#' | '##' | '#<' | '#<=' | 'Any' | 'Cell' | 'int' | 'Type' | uint | bits
uint ::= 'uint' | 'uint1' | 'uint2' | 'uint4' | 'uint8' | 'uint16' | 'uint32' | 'uint64' | 'uint128' | 'uint256' | 'uint257'
bits ::= 'bits' | 'bits1' | 'bits2' | 'bits4' | 'bits8' | 'bits16' | 'bits32' | 'bits64' | 'bits128' | 'bits256' | 'bits512' | 'bits1023'
