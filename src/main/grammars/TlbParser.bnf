{
    parserClass="com.github.andreypfau.intellijton.tlb.parser.TlbParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Tlb"
    psiImplClassSuffix="Impl"
    psiPackage="com.github.andreypfau.intellijton.tlb.psi"
    psiImplPackage="com.github.andreypfau.intellijton.tlb.psi.impl"
    implements="com.github.andreypfau.intellijton.tlb.psi.TlbElement"

    elementTypeHolderClass="com.github.andreypfau.intellijton.tlb.psi.TlbTypes"
    elementTypeClass="com.github.andreypfau.intellijton.tlb.psi.TlbElementType"
    tokenTypeClass="com.github.andreypfau.intellijton.tlb.psi.TlbTokenType"

    tokens = [
        PLUS='+'
        MINUS='-'
        TIMES='*'
        COLUMN=':'
        SEMICOLUMN=';'
        LPAREN='('
        RPAREN=')'
        LBRACE='{'
        RBRACE='}'
        LBRACKET='['
        RBRACKET=']'
        EQUALS='='
        UNDERSCORE='_'
        QUESTION='?'
        DOT='.'
        TILDE='~'
        TAG='#'
        CIRCUMFLEX='^'
        DOLLAR='$'
        EQ='=='
        LEQ='<='
        GEQ='>='
        NEQ='!='
        TYPE='Type'
        EMPTY='EMPTY'
        WHITE_SPACE='regexp:\s+'
        COMMENT='regexp:(//.*)'
        HEX_BITSTRING='regexp:#[0-9a-f]*_?'
        BINARY_BITSTRING='regexp:\$[01]*_?'
        INT_CONST='regexp[0-9]+'
        IDENTIFIER='regexp:[a-zA-Z_][0-9a-zA-Z0-9_]*'
        NUMBER='regexp:[0-9]+'
    ]
}

root ::= constructor_def*

constructor_def ::= constructor_name field_list '=' type_name ';' {pin=1}

constructor_name ::= IDENTIFIER constructor_tag?
constructor_tag ::= constructor_hex_tag | constructor_binary_tag
constructor_hex_tag ::= HEX_BITSTRING
constructor_binary_tag ::= BINARY_BITSTRING

private field_list_recovery ::= !('='|']')
field_list ::= (constraint | param)* {recoverWhile=field_list_recovery}
constraint ::= '{' expr '}' {pin=1}
param ::= named_param | unnamed_param
named_param ::= ('_' | IDENTIFIER) ':' expr95
unnamed_param ::= expr95

type_name ::= IDENTIFIER

int_const ::= INT_CONST
cell_ref ::= '^' term

expr ::= expr10
expr10 ::= expr20 '=' expr20 | expr20 '<=' expr20 | expr20 '<' expr20 | expr20 '>=' expr20 | expr20 '>' expr20 | expr20
expr20 ::= expr30 ('+' expr30)*
expr30 ::= expr90 ('*' expr90)*
expr90 ::= expr95 expr95?
expr95 ::= expr97 cond_type?
cond_type ::= '?' term {pin=1}
expr97 ::= term ('.' term)?

anonymous_constructor ::= '[' field_list ']' {pin=1}

term ::= '(' expr ')' | anonymous_constructor | int_const | cell_ref | builtin_type | neg_id | number | id {pin=1}
builtin_type ::= '#' | '##' | '#<' | '#<=' | 'Any' | 'Cell' | 'int' | 'uint' | 'bits' | 'Type'
id ::= IDENTIFIER
neg_id ::= '~' IDENTIFIER
number ::= NUMBER
