/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.andreypfau.intellijton.func.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.andreypfau.intellijton.func.psi.FuncTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_FuncLexer.flex</tt>
 */
public class _FuncLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\1\1\2\22\0\1\3\1\46\1\10\1\0\1\37\1\55\1\53\1\0\1\60\1\61"+
    "\1\44\1\25\1\43\1\6\1\23\1\45\1\26\11\21\1\41\1\4\1\54\1\47\1\50\1\62\1\40"+
    "\4\30\1\24\1\30\5\42\1\71\13\42\1\27\2\42\1\56\1\11\1\57\1\52\1\22\1\0\1\34"+
    "\1\72\1\15\1\17\1\20\1\33\1\42\1\66\1\14\2\42\1\35\1\64\1\13\1\16\1\65\1\42"+
    "\1\32\1\36\1\31\1\12\1\73\1\67\1\70\2\42\1\5\1\51\1\7\1\63\6\0\1\1\32\0\1"+
    "\3\337\0\1\3\177\0\13\3\35\0\2\1\5\0\1\3\57\0\1\3\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\6\7\1\10\1\11\1\12\1\10\4\7\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\5\7\1\36\1\0\1\37\1\40\1\0\1\41"+
    "\1\0\2\7\1\42\3\7\1\43\1\7\1\0\1\44"+
    "\1\0\1\45\1\46\1\0\5\7\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\5\7"+
    "\1\0\2\7\1\71\6\7\1\0\1\72\1\73\6\7"+
    "\1\74\1\75\4\7\1\76\1\36\5\7\1\77\1\100"+
    "\1\101\1\7\1\102\10\7\1\103\1\7\1\104\1\7"+
    "\1\105\2\7\1\106\2\7\1\107\2\7\1\110\1\111"+
    "\1\112\1\113\7\7\1\114\1\0\4\7\1\115\1\7"+
    "\1\116\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\74\0\u0168"+
    "\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348"+
    "\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528"+
    "\0\74\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc"+
    "\0\u0708\0\u0744\0\u0780\0\74\0\74\0\74\0\74\0\74"+
    "\0\74\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924"+
    "\0\74\0\74\0\u0168\0\74\0\u0960\0\u099c\0\u09d8\0\u0a14"+
    "\0\u0a50\0\u0a8c\0\u0ac8\0\u01e0\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8"+
    "\0\74\0\74\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\74\0\74"+
    "\0\74\0\u0d5c\0\74\0\74\0\74\0\74\0\74\0\74"+
    "\0\u0d98\0\74\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00"+
    "\0\u0f3c\0\u0f78\0\u01e0\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4"+
    "\0\u10e0\0\u111c\0\u111c\0\u0bf4\0\u1158\0\u1194\0\u11d0\0\u120c"+
    "\0\u1248\0\u1284\0\74\0\74\0\u12c0\0\u12fc\0\u1338\0\u1374"+
    "\0\u01e0\0\u0924\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u01e0"+
    "\0\u01e0\0\u01e0\0\u14dc\0\u01e0\0\u1518\0\u1554\0\u1590\0\u15cc"+
    "\0\u1608\0\u1644\0\u1680\0\u16bc\0\u01e0\0\u16f8\0\u01e0\0\u1734"+
    "\0\u01e0\0\u1770\0\u17ac\0\u01e0\0\u17e8\0\u1824\0\u01e0\0\u1860"+
    "\0\u189c\0\u18d8\0\u01e0\0\u01e0\0\u01e0\0\u1914\0\u1950\0\u198c"+
    "\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u01e0\0\u1ab8\0\u1af4\0\u1b30"+
    "\0\u1b6c\0\u1ba8\0\u01e0\0\u1be4\0\u01e0\0\u01e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\12\1\15\1\16\1\17"+
    "\1\12\1\20\1\12\1\21\1\22\2\12\1\23\1\24"+
    "\1\25\2\12\1\26\1\12\1\27\1\30\1\12\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\12\1\53\1\54\2\12\1\55\1\56\75\0"+
    "\3\3\74\0\1\57\75\0\1\60\73\0\1\61\40\0"+
    "\1\62\24\0\2\63\1\0\5\63\1\64\1\65\62\63"+
    "\12\0\1\12\1\66\7\12\1\0\1\12\1\0\12\12"+
    "\2\0\1\12\21\0\10\12\12\0\11\12\1\0\1\12"+
    "\1\0\12\12\2\0\1\12\21\0\10\12\12\0\1\12"+
    "\1\67\7\12\1\0\1\12\1\0\5\12\1\70\4\12"+
    "\2\0\1\12\21\0\1\71\7\12\12\0\4\12\1\72"+
    "\1\12\1\73\2\12\1\0\1\12\1\0\12\12\2\0"+
    "\1\12\21\0\10\12\12\0\4\12\1\74\4\12\1\0"+
    "\1\12\1\0\12\12\2\0\1\12\21\0\10\12\12\0"+
    "\11\12\1\0\1\12\1\0\7\12\1\75\2\12\2\0"+
    "\1\12\21\0\10\12\20\0\1\76\2\17\1\77\1\76"+
    "\1\0\1\17\66\0\1\77\1\100\3\0\1\77\72\0"+
    "\1\101\21\0\1\102\44\0\1\76\2\17\1\77\1\76"+
    "\1\0\1\17\1\103\40\0\1\103\15\0\1\104\10\12"+
    "\1\0\1\12\1\0\4\12\1\105\5\12\2\0\1\12"+
    "\21\0\10\12\12\0\6\12\1\106\2\12\1\0\1\12"+
    "\1\0\12\12\2\0\1\12\21\0\10\12\12\0\11\12"+
    "\1\0\1\12\1\0\6\12\1\107\3\12\2\0\1\12"+
    "\21\0\10\12\12\0\11\12\1\0\1\12\1\0\7\12"+
    "\1\110\2\12\2\0\1\12\21\0\10\12\12\0\11\27"+
    "\1\0\1\27\1\0\11\27\2\0\2\27\21\0\10\27"+
    "\47\0\1\111\70\0\1\112\2\0\1\113\73\0\1\114"+
    "\73\0\1\115\65\0\1\116\5\0\1\117\1\120\72\0"+
    "\1\121\1\122\72\0\1\123\1\0\1\124\71\0\1\125"+
    "\73\0\1\126\3\0\1\127\67\0\1\130\4\0\1\131"+
    "\66\0\1\132\36\0\6\12\1\133\2\12\1\0\1\12"+
    "\1\0\12\12\2\0\1\12\21\0\10\12\12\0\6\12"+
    "\1\134\2\12\1\0\1\12\1\0\12\12\2\0\1\12"+
    "\21\0\10\12\12\0\11\12\1\0\1\12\1\0\12\12"+
    "\2\0\1\12\21\0\2\12\1\135\5\12\12\0\1\136"+
    "\10\12\1\0\1\12\1\0\12\12\2\0\1\12\21\0"+
    "\10\12\12\0\11\12\1\0\1\12\1\0\6\12\1\137"+
    "\3\12\2\0\1\12\21\0\10\12\1\57\2\0\71\57"+
    "\6\60\1\140\65\60\1\63\2\0\71\63\12\0\2\12"+
    "\1\141\6\12\1\0\1\12\1\0\3\12\1\142\6\12"+
    "\2\0\1\12\21\0\10\12\12\0\11\12\1\0\1\12"+
    "\1\0\3\12\1\143\3\12\1\144\2\12\2\0\1\12"+
    "\21\0\10\12\12\0\1\12\1\145\7\12\1\0\1\12"+
    "\1\0\12\12\2\0\1\12\21\0\10\12\12\0\11\12"+
    "\1\0\1\12\1\0\12\12\2\0\1\12\21\0\1\12"+
    "\1\146\6\12\12\0\1\12\1\147\7\12\1\0\1\12"+
    "\1\0\12\12\2\0\1\12\21\0\10\12\12\0\11\12"+
    "\1\0\1\12\1\0\7\12\1\150\2\12\2\0\1\12"+
    "\21\0\10\12\12\0\11\12\1\0\1\12\1\0\10\12"+
    "\1\151\1\12\2\0\1\12\21\0\10\12\6\0\1\152"+
    "\12\0\2\153\2\0\1\152\1\153\65\0\1\76\2\77"+
    "\1\0\1\76\1\0\1\77\65\0\1\76\2\100\1\0"+
    "\1\76\1\0\1\100\62\0\1\154\1\0\4\154\1\0"+
    "\1\154\1\0\1\154\1\0\1\154\2\0\2\154\35\0"+
    "\1\154\13\0\11\12\1\0\1\12\1\0\12\12\2\0"+
    "\1\12\21\0\1\12\1\155\6\12\12\0\1\156\10\12"+
    "\1\0\1\12\1\0\12\12\2\0\1\12\21\0\10\12"+
    "\12\0\11\12\1\0\1\12\1\0\3\12\1\157\6\12"+
    "\2\0\1\12\21\0\1\12\1\160\6\12\12\0\11\12"+
    "\1\0\1\12\1\0\7\12\1\161\2\12\2\0\1\12"+
    "\21\0\10\12\12\0\2\12\1\162\6\12\1\0\1\12"+
    "\1\0\12\12\2\0\1\12\21\0\10\12\47\0\1\163"+
    "\73\0\1\164\36\0\11\12\1\0\1\12\1\0\3\12"+
    "\1\165\6\12\2\0\1\12\21\0\10\12\12\0\11\12"+
    "\1\0\1\12\1\0\12\12\2\0\1\12\21\0\4\12"+
    "\1\166\3\12\12\0\2\12\1\167\6\12\1\0\1\12"+
    "\1\0\12\12\2\0\1\12\21\0\10\12\12\0\2\12"+
    "\1\170\6\12\1\0\1\12\1\0\12\12\2\0\1\12"+
    "\21\0\10\12\12\0\11\12\1\0\1\12\1\0\4\12"+
    "\1\171\5\12\2\0\1\12\21\0\10\12\6\60\1\140"+
    "\1\172\64\60\12\0\3\12\1\173\5\12\1\0\1\12"+
    "\1\0\12\12\2\0\1\12\21\0\10\12\12\0\2\12"+
    "\1\174\6\12\1\0\1\12\1\0\12\12\2\0\1\12"+
    "\21\0\10\12\12\0\2\12\1\175\6\12\1\0\1\12"+
    "\1\0\12\12\2\0\1\12\21\0\10\12\12\0\4\12"+
    "\1\176\4\12\1\0\1\12\1\0\12\12\2\0\1\12"+
    "\21\0\10\12\12\0\1\177\10\12\1\0\1\12\1\0"+
    "\12\12\2\0\1\12\21\0\10\12\12\0\11\12\1\0"+
    "\1\12\1\0\3\12\1\200\6\12\2\0\1\12\21\0"+
    "\10\12\12\0\11\12\1\0\1\12\1\0\7\12\1\201"+
    "\2\12\2\0\1\12\21\0\10\12\12\0\6\12\1\202"+
    "\2\12\1\0\1\12\1\0\12\12\2\0\1\12\21\0"+
    "\10\12\21\0\2\153\3\0\1\153\57\0\11\12\1\0"+
    "\1\12\1\0\7\12\1\203\2\12\2\0\1\12\21\0"+
    "\10\12\12\0\6\12\1\204\2\12\1\0\1\12\1\0"+
    "\12\12\2\0\1\12\21\0\10\12\12\0\1\205\10\12"+
    "\1\0\1\12\1\0\12\12\2\0\1\12\21\0\10\12"+
    "\12\0\6\12\1\206\2\12\1\0\1\12\1\0\12\12"+
    "\2\0\1\12\21\0\10\12\12\0\11\12\1\0\1\12"+
    "\1\0\10\12\1\156\1\12\2\0\1\12\21\0\10\12"+
    "\12\0\3\12\1\207\5\12\1\0\1\12\1\0\12\12"+
    "\2\0\1\12\21\0\10\12\12\0\11\12\1\0\1\12"+
    "\1\0\12\12\2\0\1\12\21\0\2\12\1\210\5\12"+
    "\12\0\11\12\1\0\1\12\1\0\12\12\2\0\1\12"+
    "\21\0\5\12\1\211\2\12\12\0\11\12\1\0\1\12"+
    "\1\0\7\12\1\212\2\12\2\0\1\12\21\0\10\12"+
    "\12\0\11\12\1\0\1\12\1\0\7\12\1\213\2\12"+
    "\2\0\1\12\21\0\10\12\12\0\4\12\1\214\4\12"+
    "\1\0\1\12\1\0\12\12\2\0\1\12\21\0\10\12"+
    "\12\0\11\12\1\0\1\12\1\0\7\12\1\215\2\12"+
    "\2\0\1\12\21\0\10\12\12\0\1\12\1\216\7\12"+
    "\1\0\1\12\1\0\12\12\2\0\1\12\21\0\10\12"+
    "\12\0\11\12\1\0\1\12\1\0\3\12\1\217\6\12"+
    "\2\0\1\12\21\0\10\12\12\0\11\12\1\0\1\12"+
    "\1\0\4\12\1\220\5\12\2\0\1\12\21\0\10\12"+
    "\12\0\6\12\1\221\2\12\1\0\1\12\1\0\12\12"+
    "\2\0\1\12\21\0\10\12\12\0\11\12\1\0\1\12"+
    "\1\0\4\12\1\222\5\12\2\0\1\12\21\0\10\12"+
    "\12\0\11\12\1\0\1\12\1\0\6\12\1\223\3\12"+
    "\2\0\1\12\21\0\10\12\12\0\6\12\1\224\2\12"+
    "\1\0\1\12\1\0\12\12\2\0\1\12\21\0\10\12"+
    "\12\0\4\12\1\225\4\12\1\0\1\12\1\0\12\12"+
    "\2\0\1\12\21\0\10\12\12\0\2\12\1\226\6\12"+
    "\1\0\1\12\1\0\12\12\2\0\1\12\21\0\10\12"+
    "\12\0\6\12\1\227\2\12\1\0\1\12\1\0\12\12"+
    "\2\0\1\12\21\0\10\12\12\0\5\12\1\230\3\12"+
    "\1\0\1\12\1\0\12\12\2\0\1\12\21\0\10\12"+
    "\12\0\5\12\1\231\3\12\1\0\1\12\1\0\12\12"+
    "\2\0\1\12\21\0\10\12\12\0\6\12\1\232\2\12"+
    "\1\0\1\12\1\0\12\12\2\0\1\12\21\0\10\12"+
    "\12\0\6\12\1\233\2\12\1\0\1\12\1\0\12\12"+
    "\2\0\1\12\21\0\10\12\12\0\1\12\1\234\7\12"+
    "\1\0\1\12\1\0\12\12\2\0\1\12\21\0\10\12"+
    "\12\0\11\12\1\0\1\12\1\0\3\12\1\235\6\12"+
    "\2\0\1\12\21\0\10\12\12\0\5\12\1\236\3\12"+
    "\1\0\1\12\1\0\12\12\2\0\1\12\21\0\10\12"+
    "\12\0\11\12\1\0\1\12\1\0\3\12\1\237\6\12"+
    "\2\0\1\12\21\0\10\12\12\0\6\12\1\240\2\12"+
    "\1\0\1\12\1\0\12\12\2\0\1\12\21\0\10\12"+
    "\12\0\6\12\1\241\2\12\1\0\1\12\1\0\12\12"+
    "\2\0\1\12\21\0\10\12\12\0\10\12\1\242\1\0"+
    "\1\12\1\0\12\12\2\0\1\12\21\0\10\12\12\0"+
    "\10\12\1\243\1\0\1\12\1\0\12\12\2\0\1\12"+
    "\21\0\10\12\12\0\6\12\1\244\2\12\1\0\1\12"+
    "\1\0\12\12\2\0\1\12\21\0\10\12\12\0\11\12"+
    "\1\0\1\12\1\0\4\12\1\245\5\12\2\0\1\12"+
    "\21\0\10\12\10\0\1\246\1\0\11\12\1\0\1\12"+
    "\1\0\12\12\2\0\1\12\21\0\10\12\12\0\11\12"+
    "\1\0\1\12\1\0\4\12\1\247\5\12\2\0\1\12"+
    "\21\0\10\12\12\0\2\12\1\250\6\12\1\0\1\12"+
    "\1\0\12\12\2\0\1\12\21\0\10\12\12\0\11\12"+
    "\1\0\1\12\1\0\4\12\1\251\5\12\2\0\1\12"+
    "\21\0\10\12\10\246\1\64\63\246\12\0\6\12\1\252"+
    "\2\12\1\0\1\12\1\0\12\12\2\0\1\12\21\0"+
    "\10\12\12\0\5\12\1\253\3\12\1\0\1\12\1\0"+
    "\12\12\2\0\1\12\21\0\10\12\12\0\11\12\1\0"+
    "\1\12\1\0\6\12\1\254\3\12\2\0\1\12\21\0"+
    "\10\12\12\0\11\12\1\0\1\12\1\0\5\12\1\255"+
    "\4\12\2\0\1\12\21\0\10\12\12\0\11\12\1\0"+
    "\1\12\1\0\7\12\1\256\2\12\2\0\1\12\21\0"+
    "\10\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\21\1\1\11\12\1\6\11"+
    "\6\1\1\0\2\11\1\0\1\11\1\0\10\1\1\0"+
    "\1\1\1\0\2\11\1\0\5\1\11\11\1\1\6\11"+
    "\1\1\1\11\5\1\1\0\11\1\1\0\10\1\2\11"+
    "\61\1\1\0\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _FuncLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _FuncLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 80: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 81: break;
          case 3: 
            { return SEMICOLON;
            } 
            // fall through
          case 82: break;
          case 4: 
            { return LBRACE;
            } 
            // fall through
          case 83: break;
          case 5: 
            { return MINUS;
            } 
            // fall through
          case 84: break;
          case 6: 
            { return RBRACE;
            } 
            // fall through
          case 85: break;
          case 7: 
            { return IDENTIFIER;
            } 
            // fall through
          case 86: break;
          case 8: 
            { return DECIMALNUMBER;
            } 
            // fall through
          case 87: break;
          case 9: 
            { return DOT;
            } 
            // fall through
          case 88: break;
          case 10: 
            { return PLUS;
            } 
            // fall through
          case 89: break;
          case 11: 
            { return NAT_SPEC_TAG;
            } 
            // fall through
          case 90: break;
          case 12: 
            { return COLON;
            } 
            // fall through
          case 91: break;
          case 13: 
            { return COMMA;
            } 
            // fall through
          case 92: break;
          case 14: 
            { return MULT;
            } 
            // fall through
          case 93: break;
          case 15: 
            { return DIV;
            } 
            // fall through
          case 94: break;
          case 16: 
            { return NOT;
            } 
            // fall through
          case 95: break;
          case 17: 
            { return ASSIGN;
            } 
            // fall through
          case 96: break;
          case 18: 
            { return MORE;
            } 
            // fall through
          case 97: break;
          case 19: 
            { return OR;
            } 
            // fall through
          case 98: break;
          case 20: 
            { return CARET;
            } 
            // fall through
          case 99: break;
          case 21: 
            { return AND;
            } 
            // fall through
          case 100: break;
          case 22: 
            { return LESS;
            } 
            // fall through
          case 101: break;
          case 23: 
            { return PERCENT;
            } 
            // fall through
          case 102: break;
          case 24: 
            { return LBRACKET;
            } 
            // fall through
          case 103: break;
          case 25: 
            { return RBRACKET;
            } 
            // fall through
          case 104: break;
          case 26: 
            { return LPAREN;
            } 
            // fall through
          case 105: break;
          case 27: 
            { return RPAREN;
            } 
            // fall through
          case 106: break;
          case 28: 
            { return QUESTION;
            } 
            // fall through
          case 107: break;
          case 29: 
            { return TILDE;
            } 
            // fall through
          case 108: break;
          case 30: 
            { return COMMENT;
            } 
            // fall through
          case 109: break;
          case 31: 
            { return DEC;
            } 
            // fall through
          case 110: break;
          case 32: 
            { return MINUS_ASSIGN;
            } 
            // fall through
          case 111: break;
          case 33: 
            { return STRINGLITERAL;
            } 
            // fall through
          case 112: break;
          case 34: 
            { return IF;
            } 
            // fall through
          case 113: break;
          case 35: 
            { return DO;
            } 
            // fall through
          case 114: break;
          case 36: 
            { return FIXEDNUMBER;
            } 
            // fall through
          case 115: break;
          case 37: 
            { return INC;
            } 
            // fall through
          case 116: break;
          case 38: 
            { return PLUS_ASSIGN;
            } 
            // fall through
          case 117: break;
          case 39: 
            { return LEFT_ASSEMBLY;
            } 
            // fall through
          case 118: break;
          case 40: 
            { return EXPONENT;
            } 
            // fall through
          case 119: break;
          case 41: 
            { return MULT_ASSIGN;
            } 
            // fall through
          case 120: break;
          case 42: 
            { return DIV_ASSIGN;
            } 
            // fall through
          case 121: break;
          case 43: 
            { return NEQ;
            } 
            // fall through
          case 122: break;
          case 44: 
            { return RIGHT_ASSEMBLY;
            } 
            // fall through
          case 123: break;
          case 45: 
            { return EQ;
            } 
            // fall through
          case 124: break;
          case 46: 
            { return TO;
            } 
            // fall through
          case 125: break;
          case 47: 
            { return MOREEQ;
            } 
            // fall through
          case 126: break;
          case 48: 
            { return RSHIFT;
            } 
            // fall through
          case 127: break;
          case 49: 
            { return OR_ASSIGN;
            } 
            // fall through
          case 128: break;
          case 50: 
            { return OROR;
            } 
            // fall through
          case 129: break;
          case 51: 
            { return XOR_ASSIGN;
            } 
            // fall through
          case 130: break;
          case 52: 
            { return AND_ASSIGN;
            } 
            // fall through
          case 131: break;
          case 53: 
            { return ANDAND;
            } 
            // fall through
          case 132: break;
          case 54: 
            { return LESSEQ;
            } 
            // fall through
          case 133: break;
          case 55: 
            { return LSHIFT;
            } 
            // fall through
          case 134: break;
          case 56: 
            { return PERCENT_ASSIGN;
            } 
            // fall through
          case 135: break;
          case 57: 
            { return INT;
            } 
            // fall through
          case 136: break;
          case 58: 
            { return SCIENTIFICNUMBER;
            } 
            // fall through
          case 137: break;
          case 59: 
            { return HEXNUMBER;
            } 
            // fall through
          case 138: break;
          case 60: 
            { return RSHIFT_ASSIGN;
            } 
            // fall through
          case 139: break;
          case 61: 
            { return LSHIFT_ASSIGN;
            } 
            // fall through
          case 140: break;
          case 62: 
            { return VAR;
            } 
            // fall through
          case 141: break;
          case 63: 
            { return CONT;
            } 
            // fall through
          case 142: break;
          case 64: 
            { return CELL;
            } 
            // fall through
          case 143: break;
          case 65: 
            { return ELSE;
            } 
            // fall through
          case 144: break;
          case 66: 
            { return BOOLEANLITERAL;
            } 
            // fall through
          case 145: break;
          case 67: 
            { return UNTIL;
            } 
            // fall through
          case 146: break;
          case 68: 
            { return IFNOT;
            } 
            // fall through
          case 147: break;
          case 69: 
            { return TUPLE;
            } 
            // fall through
          case 148: break;
          case 70: 
            { return SLICE;
            } 
            // fall through
          case 149: break;
          case 71: 
            { return WHILE;
            } 
            // fall through
          case 150: break;
          case 72: 
            { return INLINE;
            } 
            // fall through
          case 151: break;
          case 73: 
            { return IMPURE;
            } 
            // fall through
          case 152: break;
          case 74: 
            { return RETURN;
            } 
            // fall through
          case 153: break;
          case 75: 
            { return REPEAT;
            } 
            // fall through
          case 154: break;
          case 76: 
            { return BUILDER;
            } 
            // fall through
          case 155: break;
          case 77: 
            { return METHOD_ID;
            } 
            // fall through
          case 156: break;
          case 78: 
            { return INLINE_REF;
            } 
            // fall through
          case 157: break;
          case 79: 
            { return HEXLITERAL;
            } 
            // fall through
          case 158: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
